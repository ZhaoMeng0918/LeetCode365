public class Main {

    /**
     * 二叉树层序遍历的数组转换成二叉树
     *
     * @param args
     */
    public static void main(String[] args) {
        // 定义一个数组
        Object[] arr = new Object[] {0, 1, 2, 3, 4, null, null, null, null, 5, 6, null, null, null, null, null, null, null, null, null, null, 7};

        Main main = new Main();

        TreeNode root = new TreeNode(arr[0]);

        main.arr22XTree(arr, 0, root);

        main.inOrderRecur(root);
    }

    /**
     * 方法一：根据层序遍历与二叉树节点位置的对应关系生成二叉树
     *
     * @param arr
     * @param i
     * @param node
     */
    public void arr22XTree(Object[] arr, int i, TreeNode node) {
        int leftp = 2 * i + 1;
        if(leftp < arr.length && arr[leftp] != null) {
            TreeNode left = new TreeNode(arr[leftp]);
            node.setLeft(left);
            arr22XTree(arr, leftp, node.getLeft());
        }

        int rightp = 2 * i + 2;
        if(rightp < arr.length && arr[rightp] != null) {
            TreeNode right = new TreeNode(arr[rightp]);
            node.setRight(right);
            arr22XTree(arr, rightp, node.getRight());
        }
    }

    /**
     * 中序遍历
     *
     * @param root
     */
    public void inOrderRecur(TreeNode root) {
        if (root == null) {
            return;
        }
        inOrderRecur(root.getLeft());
        System.out.print(root.getVal() + " -> ");
        inOrderRecur(root.getRight());
    }
}

/**
 * 二叉树定义
 */
class TreeNode {
    private Object val;

    private  TreeNode left;

    private  TreeNode right;

    public TreeNode() {
    }

    public TreeNode(Object val) {
        this.val = val;
    }

    public TreeNode(Object val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }

    public Object getVal() {
        return val;
    }

    public void setVal(Object val) {
        this.val = val;
    }

    public TreeNode getLeft() {
        return left;
    }

    public void setLeft(TreeNode left) {
        this.left = left;
    }

    public TreeNode getRight() {
        return right;
    }

    public void setRight(TreeNode right) {
        this.right = right;
    }
}
